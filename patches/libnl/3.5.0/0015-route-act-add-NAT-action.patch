From 35a39a32c76a1b43c1b16f7cd8c137e68ea86813 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Magnus=20=C3=96berg?= <magnus.oberg@westermo.se>
Date: Wed, 6 Apr 2016 14:53:04 +0200
Subject: [PATCH 15/38] route/act: add NAT action
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Westermo Network Technologies AB

Signed-off-by: Magnus Öberg <magnus.oberg@westermo.se>
Signed-off-by: Joachim Nilsson <troglobit@gmail.com>
---
 Makefile.am                                 |   4 +
 include/linux-private/linux/tc_act/tc_nat.h |  27 ++
 include/netlink/route/act/nat.h             |  41 +++
 lib/route/act/nat.c                         | 318 ++++++++++++++++++++
 libnl-route-3.sym                           |  14 +
 5 files changed, 404 insertions(+)
 create mode 100644 include/linux-private/linux/tc_act/tc_nat.h
 create mode 100644 include/netlink/route/act/nat.h
 create mode 100644 lib/route/act/nat.c

diff --git a/Makefile.am b/Makefile.am
index 042d05f..1133d58 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -125,7 +125,9 @@ libnlinclude_netlink_route_act_HEADERS = \
 	include/netlink/route/act/skbedit.h \
 	include/netlink/route/act/vlan.h \
 	include/netlink/route/act/police.h \
+	include/netlink/route/act/nat.h \
 	$(NULL)
+
 libnlinclude_netlink_route_clsdir = $(libnlincludedir)/netlink/route/cls
 libnlinclude_netlink_route_cls_HEADERS = \
 	include/netlink/route/cls/basic.h \
@@ -258,6 +260,7 @@ noinst_HEADERS = \
 	include/linux-private/linux/tc_act/tc_mirred.h \
 	include/linux-private/linux/tc_act/tc_skbedit.h \
 	include/linux-private/linux/tc_act/tc_vlan.h \
+	include/linux-private/linux/tc_act/tc_nat.h \
 	include/linux-private/linux/tc_ematch/tc_em_meta.h \
 	include/linux-private/linux/veth.h \
 	include/linux-private/linux/xfrm.h \
@@ -377,6 +380,7 @@ lib_libnl_route_3_la_SOURCES = \
 	lib/route/act/skbedit.c \
 	lib/route/act/vlan.c \
 	lib/route/act/police.c \
+	lib/route/act/nat.c \
 	lib/route/addr.c \
 	lib/route/class.c \
 	lib/route/classid.c \
diff --git a/include/linux-private/linux/tc_act/tc_nat.h b/include/linux-private/linux/tc_act/tc_nat.h
new file mode 100644
index 0000000..6663aeb
--- /dev/null
+++ b/include/linux-private/linux/tc_act/tc_nat.h
@@ -0,0 +1,27 @@
+#ifndef __LINUX_TC_NAT_H
+#define __LINUX_TC_NAT_H
+
+#include <linux/pkt_cls.h>
+#include <linux/types.h>
+
+#define TCA_ACT_NAT 9
+
+enum {
+	TCA_NAT_UNSPEC,
+	TCA_NAT_PARMS,
+	TCA_NAT_TM,
+	__TCA_NAT_MAX
+};
+#define TCA_NAT_MAX (__TCA_NAT_MAX - 1)
+
+#define TCA_NAT_FLAG_EGRESS 1
+
+struct tc_nat {
+	tc_gen;
+	__be32 old_addr;
+	__be32 new_addr;
+	__be32 mask;
+	__u32 flags;
+};
+
+#endif
diff --git a/include/netlink/route/act/nat.h b/include/netlink/route/act/nat.h
new file mode 100644
index 0000000..705f94a
--- /dev/null
+++ b/include/netlink/route/act/nat.h
@@ -0,0 +1,41 @@
+/*
+ * netlink/route/act/nat.h	NAT action
+ *
+ *	This library is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU Lesser General Public
+ *	License as published by the Free Software Foundation version 2.1
+ *	of the License.
+ *
+ * Copyright (c) 2016 Magnus Öberg <magnus.oberg@westermo.se>
+ */
+
+#ifndef NETLINK_NAT_H_
+#define NETLINK_NAT_H_
+
+#include <netlink/netlink.h>
+#include <netlink/cache.h>
+#include <netlink/route/action.h>
+#include <linux/tc_act/tc_nat.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int rtnl_nat_set_old_addr(struct rtnl_act *act, uint32_t addr);
+extern int rtnl_nat_set_old_in_addr(struct rtnl_act *act, const struct in_addr *addr);
+extern uint32_t rtnl_nat_get_old_addr(struct rtnl_act *act);
+extern int rtnl_nat_set_new_addr(struct rtnl_act *act, uint32_t addr);
+extern int rtnl_nat_set_new_in_addr(struct rtnl_act *act, const struct in_addr *addr);
+extern uint32_t rtnl_nat_get_new_addr(struct rtnl_act *act);
+extern int rtnl_nat_set_mask(struct rtnl_act *act, uint8_t bitmask);
+extern uint32_t rtnl_nat_get_mask(struct rtnl_act *act);
+extern int rtnl_nat_set_flags(struct rtnl_act *act, uint32_t flags);
+extern uint32_t rtnl_nat_get_flags(struct rtnl_act *act);
+extern int rtnl_nat_set_action(struct rtnl_act *act, int action);
+extern int rtnl_nat_get_action(struct rtnl_act *act);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif	/* NETLINK_NAT_H */
diff --git a/lib/route/act/nat.c b/lib/route/act/nat.c
new file mode 100644
index 0000000..f017ddc
--- /dev/null
+++ b/lib/route/act/nat.c
@@ -0,0 +1,318 @@
+/*
+ * lib/route/act/nat.c	NAT action
+ *
+ *	This library is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU Lesser General Public
+ *	License as published by the Free Software Foundation version 2.1
+ *	of the License.
+ *
+ * Copyright (c) 2016 Magnus Öberg <magnus.oberg@westermo.se>
+ */
+
+/**
+ * @ingroup act
+ * @defgroup act_nat NAT
+ *
+ * @{
+ */
+
+#include <netlink-private/netlink.h>
+#include <netlink-private/tc.h>
+#include <netlink/netlink.h>
+#include <netlink/attr.h>
+#include <netlink/utils.h>
+#include <netlink-private/route/tc-api.h>
+#include <netlink/route/act/nat.h>
+#include <netlink/route/tc.h>
+
+static struct nla_policy nat_policy[TCA_NAT_MAX + 1] = {
+	[TCA_NAT_PARMS] = { .minlen = sizeof(struct tc_nat) },
+};
+
+/**
+ * nat operations
+ */
+
+static int nat_msg_parser(struct rtnl_tc *tc, void *data)
+{
+	struct tc_nat *nat = data;
+	struct nlattr *tb[TCA_NAT_MAX + 1];
+	int err;
+
+	err = tca_parse(tb, TCA_NAT_MAX, tc, nat_policy);
+	if (err < 0)
+		return err;
+
+	if (!tb[TCA_NAT_PARMS])
+		return -NLE_MISSING_ATTR;
+
+	nla_memcpy(nat, tb[TCA_NAT_PARMS], sizeof(*nat));
+	rtnl_tc_set_act_index(tc, nat->index);
+
+	return NLE_SUCCESS;
+}
+
+static void nat_free_data(struct rtnl_tc *tc, void *data)
+{
+}
+
+static int nat_clone(void *_dst, void *_src)
+{
+	struct tc_nat *dst = _dst, *src = _src;
+
+	memcpy(dst, src, sizeof(*src));
+
+	return NLE_SUCCESS;
+}
+
+static int nat_msg_fill(struct rtnl_tc *tc, void *data, struct nl_msg *msg)
+{
+	struct tc_nat *nat = data;
+
+	if (!nat)
+		return -NLE_OBJ_NOTFOUND;
+
+	NLA_PUT(msg, TCA_NAT_PARMS, sizeof(*nat), nat);
+
+	return NLE_SUCCESS;
+
+nla_put_failure:
+	return -NLE_NOMEM;
+}
+
+static void nat_dump_line(struct rtnl_tc *tc, void *data,
+                          struct nl_dump_params *p)
+{
+	struct tc_nat *nat = data;
+	char buf[32];
+	uint32_t mask;
+	int pfx = 0;
+
+	if (!nat)
+		return;
+
+	if (nat->flags & TCA_NAT_FLAG_EGRESS)
+		nl_dump(p, " egress");
+	else
+		nl_dump(p, " ingress");
+
+	mask = ntohl(nat->mask);
+	while (mask > 0) {
+		mask = mask >> 1;
+		pfx++;
+	}
+
+	inet_ntop(AF_INET, &nat->old_addr, buf, sizeof(buf));
+	nl_dump(p, " %s", buf);
+	if (pfx < 32)
+		nl_dump(p, "/%d", pfx);
+
+	inet_ntop(AF_INET, &nat->new_addr, buf, sizeof(buf));
+	nl_dump(p, " %s", buf);
+	if (pfx < 32)
+		nl_dump(p, "/%d", pfx);
+}
+
+/**
+ * @name Attribute Modifications
+ * @{
+ */
+
+/**
+ * Set old IPv4 address on a netlink NAT action object
+ * @arg act        Action object
+ * @arg addr       Binary IPv4 address in host byte order
+ *
+ * @return 0 on success or negative error code in case of an error.
+ */
+int rtnl_nat_set_old_addr(struct rtnl_act *act, uint32_t addr)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->old_addr = htonl(addr);
+
+	return NLE_SUCCESS;
+}
+
+int rtnl_nat_set_old_in_addr(struct rtnl_act *act, const struct in_addr *addr)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->old_addr = addr->s_addr;
+
+	return NLE_SUCCESS;
+}
+
+uint32_t rtnl_nat_get_old_addr(struct rtnl_act *act)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	return nat->old_addr;
+}
+
+/**
+ * Set new IPv4 address on a netlink NAT action object
+ * @arg act        Action object
+ * @arg addr       Binary IPv4 address in host byte order
+ *
+ * @return 0 on success or negative error code in case of an error.
+ */
+int rtnl_nat_set_new_addr(struct rtnl_act *act, uint32_t addr)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->new_addr = htonl(addr);
+
+	return NLE_SUCCESS;
+}
+
+int rtnl_nat_set_new_in_addr(struct rtnl_act *act, const struct in_addr *addr)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->new_addr = addr->s_addr;
+
+	return NLE_SUCCESS;
+}
+
+uint32_t rtnl_nat_get_new_addr(struct rtnl_act *act)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	return nat->new_addr;
+}
+
+/**
+ * Set IPv4 address mask on a netlink NAT action object
+ * @arg act        Action object
+ * @arg mask       IPv4 address mask
+ *
+ * @return 0 on success or negative error code in case of an error.
+ */
+int rtnl_nat_set_mask(struct rtnl_act *act, uint8_t bitmask)
+{
+	struct tc_nat *nat;
+	uint32_t mask = 0xFFFFFFFF << (32 - bitmask);
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->mask = htonl(mask);
+
+	return NLE_SUCCESS;
+}
+
+uint32_t rtnl_nat_get_mask(struct rtnl_act *act)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	return nat->mask;
+}
+
+/**
+ * Set flags for a netlink NAT action object
+ * @arg act        Action object
+ * @arg flags      TCA_NAT_FLAG_* flags.
+ *
+ * Currently only TCA_NAT_FLAG_EGRESS is defined. Selects NAT on
+ * egress/IP src if set, ingress/IP dst otherwise.
+ *
+ * @return 0 on success or negative error code in case of an error.
+ */
+int rtnl_nat_set_flags(struct rtnl_act *act, uint32_t flags)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	nat->flags = flags;
+
+	return NLE_SUCCESS;
+}
+
+uint32_t rtnl_nat_get_flags(struct rtnl_act *act)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	return nat->flags;
+}
+
+int rtnl_nat_set_action(struct rtnl_act *act, int action)
+{
+	struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data(TC_CAST(act))))
+		return -NLE_NOMEM;
+
+	if (action < TC_ACT_UNSPEC)
+		return -NLE_INVAL;
+
+	nat->action = action;
+	return 0;
+}
+
+int rtnl_nat_get_action(struct rtnl_act *act)
+{
+        struct tc_nat *nat;
+
+	if (!(nat = (struct tc_nat *) rtnl_tc_data_peek(TC_CAST(act))))
+	        return -NLE_NOMEM;
+
+	return nat->action;
+}
+
+/**
+ * @}
+ */
+
+static struct rtnl_tc_ops nat_ops = {
+	.to_kind                = "nat",
+	.to_type                = RTNL_TC_TYPE_ACT,
+	.to_size                = sizeof(struct tc_nat),
+	.to_msg_parser          = nat_msg_parser,
+	.to_free_data           = nat_free_data,
+	.to_clone               = nat_clone,
+	.to_msg_fill            = nat_msg_fill,
+	.to_dump = {
+		[NL_DUMP_LINE]  = nat_dump_line,
+	},
+};
+
+static void __init nat_init(void)
+{
+	rtnl_tc_register(&nat_ops);
+}
+
+static void __exit nat_exit(void)
+{
+	rtnl_tc_unregister(&nat_ops);
+}
+
+/**
+ * @}
+ */
diff --git a/libnl-route-3.sym b/libnl-route-3.sym
index 5b617ee..ad5a94a 100644
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -1230,4 +1230,18 @@ global:
 	rtnl_route_lookup;
 	rtnl_tc_set_act_index;
 	rtnl_tc_get_act_index;
+	rtnl_neigh_ll_get;
+	rtnl_route_lookup;
+	rtnl_nat_set_old_addr;
+	rtnl_nat_set_old_in_addr;
+	rtnl_nat_get_old_addr;
+	rtnl_nat_set_new_addr;
+	rtnl_nat_set_new_in_addr;
+	rtnl_nat_get_new_addr;
+	rtnl_nat_set_mask;
+	rtnl_nat_get_mask;
+	rtnl_nat_set_flags;
+	rtnl_nat_get_flags;
+	rtnl_nat_set_action;
+	rtnl_nat_get_action;
 } libnl_3_4;
-- 
2.25.1

